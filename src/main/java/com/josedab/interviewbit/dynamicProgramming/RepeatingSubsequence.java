package com.josedab.interviewbit.dynamicProgramming;

/**
 * Given a string, find if there is any sub-sequence that repeats itself.
 A sub-sequence of a string is defined as a sequence of characters generated by deleting
 some characters in the string without changing the order of the remaining characters.

 Input:
 string

 Output:

 0/1
 0 -> No
 1 -> Yes
 Example:

 abab ------> yes, ab is repeated. So, return 1.
 */
public class RepeatingSubsequence {

    public int anytwo(String str) {
        int n = str.length();

        // Create and initialize DP table
        int[][] dp = new int[n + 1][n + 1];

        // Fill dp table (similar to LCS loops)
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                // If characters match and indexes are not same
                if (str.charAt(i - 1) == str.charAt(j - 1) && i != j) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];

                    // If characters do not match
                } else {
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
                }
            }
        }
        return dp[n][n] >= 2 ? 1 : 0;
    }

    public static void main(String[] args) {
        RepeatingSubsequence solution = new RepeatingSubsequence();
        System.out.println(solution.anytwo("abab"));
    }

}
